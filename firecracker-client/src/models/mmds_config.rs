/*
 * Firecracker API
 *
 * RESTful public-facing API. The API is accessible through HTTP calls on specific URLs carrying JSON modeled data. The transport medium is a Unix Domain Socket.
 *
 * The version of the OpenAPI document: 1.4.1
 * Contact: compute-capsule@amazon.com
 * Generated by: https://openapi-generator.tech
 */

/// MmdsConfig : Defines the MMDS configuration.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct MmdsConfig {
    /// Enumeration indicating the MMDS version to be configured.
    #[serde(rename = "version", skip_serializing_if = "Option::is_none")]
    pub version: Option<Version>,
    /// List of the network interface IDs capable of forwarding packets to the MMDS. Network interface IDs mentioned must be valid at the time of this request. The net device model will reply to HTTP GET requests sent to the MMDS address via the interfaces mentioned. In this case, both ARP requests and TCP segments heading to `ipv4_address` are intercepted by the device model, and do not reach the associated TAP device.
    #[serde(rename = "network_interfaces")]
    pub network_interfaces: Vec<String>,
    /// A valid IPv4 link-local address.
    #[serde(rename = "ipv4_address", skip_serializing_if = "Option::is_none")]
    pub ipv4_address: Option<String>,
}

impl MmdsConfig {
    /// Defines the MMDS configuration.
    pub fn new(network_interfaces: Vec<String>) -> MmdsConfig {
        MmdsConfig {
            version: None,
            network_interfaces,
            ipv4_address: None,
        }
    }
}

/// Enumeration indicating the MMDS version to be configured.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Version {
    #[serde(rename = "V1")]
    V1,
    #[serde(rename = "V2")]
    V2,
}

impl Default for Version {
    fn default() -> Version {
        Self::V1
    }
}

